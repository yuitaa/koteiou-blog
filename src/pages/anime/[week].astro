---
import { getCollection } from 'astro:content';
import PageLayout from '@/layouts/PageLayout.astro';
import { countDayOccurrences } from '@/utils/occurrences.mjs';
import {
  getDayOfWeek,
  getDisplayDate,
  getFirstDayOfWeek,
} from '@/utils/date.mjs';
import ArticlePagination from '@/components/ArticlePagination.astro';

function generateWeekString(week: string | null) {
  if (!week) {
    return null;
  }
  const firstDay = getFirstDayOfWeek(week);
  return `${firstDay[0]}年${firstDay[1]}月${Math.trunc((firstDay[2] - 1) / 7) + 1}週`;
}

export async function getStaticPaths() {
  const annictData = (await getCollection('annict')).sort((a, b) =>
    a.id.localeCompare(b.id),
  );
  return annictData.map((data, i) => ({
    params: { week: data.id },
    props: {
      data: data.data,
      previousWeek: i === 0 ? null : annictData[i - 1].id,
      nextWeek: i + 1 === annictData.length ? null : annictData[i + 1].id,
    },
  }));
}

const { week } = Astro.params;
const { data, previousWeek, nextWeek } = Astro.props;

const firstDay = getFirstDayOfWeek(week);
const weekString = generateWeekString(week);

const dayArray = data.map((record) => getDayOfWeek(record.createdAt));
const dayCount = countDayOccurrences(dayArray);

const dayOfWeekNames = ['月', '火', '水', '木', '金', '土', '日'];

let currentIndex = 0;
const slicedData = dayCount.map((count, index) => {
  let slicedPart = data
    .slice(currentIndex, currentIndex + count)
    .sort((a, b) => {
      if (a.title === b.title) {
        if (a.sortNumber !== null && b.sortNumber !== null) {
          return a.sortNumber - b.sortNumber;
        } else {
          return 0;
        }
      } else {
        return a.title.localeCompare(b.title);
      }
    });
  currentIndex += count;
  const dateString = getDisplayDate(firstDay, index).slice(5);

  return { data: slicedPart, index, dateString };
});
---

<PageLayout title={`視聴記録 ${weekString}`}>
  <section class="markdown">
    <h2>視聴記録 {weekString}</h2>

    {
      slicedData.map(
        (d) =>
          d.data.length !== 0 && [
            <h3>
              {d.dateString}({dayOfWeekNames[d.index]}) - {d.data.length}
            </h3>,
            <ul>
              {d.data.map((r) => (
                <li>
                  {r.title}
                  {r.subtitle && (
                    <span class="text-text-secondary text-sm">
                      {r.subtitle}
                    </span>
                  )}
                </li>
              ))}
            </ul>,
          ],
      )
    }
  </section>
  <section class="my-2">
    <ArticlePagination
      previous={{
        title: generateWeekString(previousWeek),
        link: `/anime/${previousWeek}`,
      }}
      next={{ title: generateWeekString(nextWeek), link: `/anime/${nextWeek}` }}
    />
  </section>
</PageLayout>
